<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shjang</title>
    <description>有緣</description>
    <link>http://shjang.com/</link>
    <atom:link href="http://shjang.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 16 Feb 2016 11:16:49 +0000</pubDate>
    <lastBuildDate>Tue, 16 Feb 2016 11:16:49 +0000</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Lists of Linux kernel</title>
        <description>
&lt;h3 class=&quot;no_toc&quot; id=&quot;section&quot;&gt;目录&lt;/h3&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#x00-listhlist&quot; id=&quot;markdown-toc-x00-listhlist&quot;&gt;0x00 如何使用list（hlist）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#x01-list&quot; id=&quot;markdown-toc-x01-list&quot;&gt;0x01 list&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#x02-hlist&quot; id=&quot;markdown-toc-x02-hlist&quot;&gt;0x02 hlist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#part1&quot; id=&quot;markdown-toc-part1&quot;&gt;Part1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#part2&quot; id=&quot;markdown-toc-part2&quot;&gt;Part2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#x02-preserve&quot; id=&quot;markdown-toc-x02-preserve&quot;&gt;0x02 preserve&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot; id=&quot;markdown-toc-references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;p&gt;最近想看一下Linux kernel的IP协议栈相关源代码，发现首先得做很多功课，比如数据结构。初步看了下list的实现，的确有很多奇妙的地方。源代码位于&lt;code&gt;include/linux/list.h&lt;/code&gt;，新版本内核可能会添加少许函数，基本的函数都是一致的。&lt;/p&gt;

&lt;h2 id=&quot;x00-listhlist&quot;&gt;0x00 如何使用list（hlist）&lt;/h2&gt;

&lt;p&gt;平常使用list的时候都是在链表中包含数据，比如&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;```&lt;/p&gt;

  &lt;p&gt;struct test_list {
	struct test_list *next;
	int data
};&lt;/p&gt;

  &lt;p&gt;```&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;内核中使用list时，是在数据中包含链表，比如&lt;/p&gt;

&lt;p&gt;```
struct nf_sockopt_ops
{
	&lt;strong&gt;struct list_head list;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int pf;

/* Non-inclusive ranges: use 0/0/NULL to never get called. */
int set_optmin;
int set_optmax;
int (*set)(struct sock *sk, int optval, void __user *user, unsigned int len);
int (*compat_set)(struct sock *sk, int optval,
		void __user *user, unsigned int len);

int get_optmin;
int get_optmax;
int (*get)(struct sock *sk, int optval, void __user *user, int *len);
int (*compat_get)(struct sock *sk, int optval,
		void __user *user, int *len);

/* Number of users inside set() or get(). */
unsigned int use;
struct task_struct *cleanup_task; };

//definition:
static LIST_HEAD(nf_sockopts);

//list add
list_add(&amp;amp;reg-&amp;gt;list, &amp;amp;nf_sockopts);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;有哪些优点呢？&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;Type Oblivious:
This list can be used to strung up any data structure you have in mind.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Portable:
Though I haven’t tried in every platform it is safe to assume the list implementation is &amp;gt;very portable. Otherwise it would not have made it into the kernel source tree.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Easy to Use:
Since the list is type oblivious same functions are used to initialize, access, and &amp;gt;traverse any list of items strung together using this list implementation.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Readable:
The macros and inlined functions of the list implementation makes the resulting code very &amp;gt;elegant and readable.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Saves Time:
Stops you from reinventing the wheel. Using the list really saves a lot of debugging time &amp;gt;and repetitively creating lists for every data structure you need to link.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;甚至：
&amp;gt;1. List is inside the data item you want to link together.
&amp;gt;2. You &lt;strong&gt;can put&lt;/strong&gt; struct list_head &lt;strong&gt;anywhere&lt;/strong&gt; in your structure.
&amp;gt;3. You &lt;strong&gt;can name&lt;/strong&gt; struct list_head &lt;strong&gt;variable anything&lt;/strong&gt; you wish.
&amp;gt;4. You &lt;strong&gt;can have&lt;/strong&gt; multiple lists!&lt;/p&gt;

&lt;p&gt;因此，这样的方式非常灵活。&lt;/p&gt;

&lt;h2 id=&quot;x01-list&quot;&gt;0x01 list&lt;/h2&gt;

&lt;p&gt;结构体定义：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;```&lt;/p&gt;

  &lt;p&gt;struct list_head {
	struct list_head *next, *prev;
};&lt;/p&gt;

  &lt;p&gt;```&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是一个双循环链表，提供初始化、添加、删除、移动、合并等链表的操作，里边的实现应该是比较自然直观的，除了函数末尾有rcu的函数之外，带rcu系列的&lt;strong&gt;应该&lt;/strong&gt;是有预存取操作加速的。&lt;/p&gt;

&lt;h2 id=&quot;x02-hlist&quot;&gt;0x02 hlist&lt;/h2&gt;

&lt;p&gt;结构体定义：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;```&lt;/p&gt;

  &lt;p&gt;/*
* Double linked lists with a single pointer list head.
* Mostly useful for hash tables where the two pointer list head is
* too wasteful.
* You lose the ability to access the tail in O(1).
*/
struct hlist_head {
	struct hlist_node *first;
};&lt;/p&gt;

  &lt;p&gt;struct hlist_node {
	struct hlist_node *next, **pprev;
};&lt;/p&gt;

  &lt;p&gt;```&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为hash表会很大，head部分只有一个指针，节省空间（注解里说的比较明白），还有其他考虑吗？&lt;/p&gt;

&lt;p&gt;对于结构体的定义，第一眼的感觉，很多人可能会问，我也不能免俗，为什么不是：&lt;/p&gt;

&lt;p&gt;```
struct hlist_head {
	struct hlist_node *first;
};&lt;/p&gt;

&lt;p&gt;struct hlist_node {
	struct hlist_node *next, *prev;
};
```&lt;/p&gt;

&lt;p&gt;写这篇文章其实主要就是为了消除这个疑惑的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;由于hlist不是一个完整的循环链表，在list中，表头和结点是同一个数据结构，直接用prev是ok的。在hlist中，表头中没有prev，只有一个first。&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;链表head只有一个指向第一个节点的指针，链表节点分别有指向下一个和上一个节点的指针，如此上一个节点便不能和下一个节点使用相同的类型，因为第一个节点的上一个节点是一个struct hlist_head类型而不是hlist_node类型，于是这里巧妙地使用了指向上一个节点的&lt;strong&gt;next指针的地址&lt;/strong&gt;作为上一个节点的指针，我们知道在获取上一个节点的时候一般是为了对它进行插入操作，而插入操作只需要操作上一个节点的next指针（hlist_head和hlist_node的指向下个节点的指针类型相同，这样便可以在插入和删除操作对于首节点和普通节点不失通用性了），而不需要操作prev指针，于是这种设计便足够使用了，为上一个节点的next指针赋值时只需要为*(node-&amp;gt;pprev)赋值即可&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;还解决了数据结构不一致，hlist_node巧妙的将pprev指向上一个节点的next指针的地址，由于hlist_head和hlist_node指向的下一个节点的指针类型相同，就解决了通用性。&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果到这里你还没看明白是怎么回事，那么给几个比较的代码就能明白了。&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2 id=&quot;part1&quot;&gt;Part1&lt;/h2&gt;

&lt;p&gt;//Use Linux kernel’s way:
static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
	struct hlist_node *first = h-&amp;gt;first;
	n-&amp;gt;next = first;
	if (first)
		first-&amp;gt;pprev = &amp;amp;n-&amp;gt;next;
	h-&amp;gt;first = n;
	&lt;strong&gt;n-&amp;gt;pprev = &amp;amp;h-&amp;gt;first;&lt;/strong&gt;
}&lt;/p&gt;

&lt;p&gt;//Use your own way:
Void hlist_add_head(struct hlist_node *n ,struct hlist_head *h) 
{
  struct hlist_node *first = h-&amp;gt;first;&lt;/p&gt;

&lt;p&gt;n-&amp;gt;next = first;
  if (first) 
    first-&amp;gt;prev = n;
  h-&amp;gt;first = n;
  &lt;strong&gt;n-&amp;gt;prev = NULL;&lt;/strong&gt;
}&lt;/p&gt;

&lt;h2 id=&quot;part2&quot;&gt;Part2&lt;/h2&gt;
&lt;p&gt;//Use Linux kernel’s way:
/*insert &lt;strong&gt;next&lt;/strong&gt; before &lt;strong&gt;n&lt;/strong&gt; */
/* next must be != NULL */
static inline void hlist_add_before(struct hlist_node *n,
					struct hlist_node *next)
{
	n-&amp;gt;pprev = next-&amp;gt;pprev;
	n-&amp;gt;next = next;
	next-&amp;gt;pprev = &amp;amp;n-&amp;gt;next;
	*(n-&amp;gt;pprev) = n;
}&lt;/p&gt;

&lt;p&gt;//Use your own way:
static inline void hlist_add_before(struct hlist_node *n,
					struct hlist_node *next,
					struct hlist_head *head) //extra push
{
	n-&amp;gt;prev = next-&amp;gt;prev;
	n-&amp;gt;next = next;
	next-&amp;gt;prev = n;
	if(n-&amp;gt;prev){
		n-&amp;gt;prev-&amp;gt;next = n;
	}else{
		Head-&amp;gt;first = n;
	}
}&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;看到没有，对于add函数，就要多出一个参数的push还有if-else的判断，远没有内核中实现的那么流畅和简洁！对于插入和删除等操作也是如此，因此，内核中实现的hlist是何等的简洁和高明，在此对写出此代码的人表示最真诚的敬意！&lt;/p&gt;

&lt;h2 id=&quot;x02-preserve&quot;&gt;0x02 preserve&lt;/h2&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://lwn.net/Articles/336255/&quot;&gt;Linux kernel design patterns - part 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lwn.net/Articles/336224/&quot;&gt;Linux kernel design patterns - part 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://isis.poly.edu/kulesh/stuff/src/klist/&quot;&gt;Linux Kernel Linked List Explained&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/wang_yb/archive/2013/04/16/3023892.html&quot;&gt;《Linux内核设计与实现》读书笔记（六）- 内核数据结构&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate>
        <link>http://shjang.com/blog/2016/02/16/Linux-kernel-list/</link>
        <guid isPermaLink="true">http://shjang.com/blog/2016/02/16/Linux-kernel-list/</guid>
        
        <category>Linux kernel</category>
        
        <category>list</category>
        
        <category>hlist</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>2015过往</title>
        <description>
&lt;h3 class=&quot;no_toc&quot; id=&quot;section&quot;&gt;目录&lt;/h3&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;怀孕&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;在孕&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;出生&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;看护&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;喂养&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;开始&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;怀孕&lt;/h2&gt;
&lt;p&gt;当然不是我怀孕，是我老婆。从校园出来，异地了一段时间。刚好机缘巧合，老婆的一个忘年之交认识我所在城市老婆系统的故人，面试过后，老婆很顺利地调动过来，开始亲密的生活，离开我们都喜欢怀念的南京，其实还是很有不舍，毕竟，我们两在那里上了这么多年的学，但生活才刚刚开始，这是2012年底。&lt;/p&gt;

&lt;p&gt;起居规律，上班下班，打球吃喝。老婆的情绪也比较稳定，基本没有什么波动。倒是她的公司，把她搁那里感觉大材小用，有时，她会有郁郁不得志，胸中丘壑无用武之地的无力感。但转念一想，自己一介女子，以后相夫教子矣。才释然一些，冰雪聪明的她，无论上学时的学霸模式，还是生活中处处灵巧的思维，总是把我呈现出纰漏而笨拙来。我虽然有几个一届过来的朋友，处境一致，都是最后把家安在这里，自然，这也就是我们在这里的朋友，不多不少，就那么几个。没有本科同学，更没有同乡之人。因此，时时也会有些孤独感，可能生活在城市，很多时候并不会像生活在山村那么踏实（我从小生活在云南山村）。如影而过，13年14年就这样过往，在14年底，我们决定生个娃吧，周围几个好朋友就我们最晚了，为了赶上趟，年纪其实也不小了（特指我），生就生吧，14年11月底如约而来。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;在孕&lt;/h2&gt;
&lt;p&gt;14年元旦，我们决定回一趟老婆老家，离我们的城市500公里左右，决定开车回去，那时我是一只开车的菜鸟，老婆比我老一点，她决定亲自操刀，这时已经身孕三个月。虽然一切顺利，现在回头想想还是有点冒险的，前三个月其实是比较危险的。何况，我老婆是急性子，反应快当然脾气也快。也正是这些因缘，她接触佛家理论，会相信一些因果和缘分。她以前练瑜伽，现在打坐冥想，通过这些“慢”的东西，来修习她的戾气，她是有些慧根的，这其实是一种顺应周遭凌乱社会的处世吧，于她还是比较合适的。所以，日常起居，自然而为，觉得孩子自有孩子的强大和因果，不必事事那么细微谨慎，偶尔还会跟我去原地打打羽毛球。&lt;/p&gt;

&lt;p&gt;可能是她体质比较好的缘故（怀孕前她短跑还破了集团的记录），平时打球运动就很多，能吃能喝，克己。孕期反应不大，说笑自如，上班如常。四五月份后天气酷热，况且也不能一直都吃食堂，我准备回老家把我妈接过来照顾她，回去这段时间岳父岳母正好过来照看她。我和我妈是六月四日到的，还清楚记得老人家刚来时胃不舒服，可能是路途上折腾，本来身体就不太好，还好她们俩基本处的来，我妈说一口方言普通话，比在老家是空闲多了，闲的不自在她也去跟大妈们学着跳跳舞，算适应过来了。至于做吃的，一开始媳妇当然不太喜欢云南的做法，不是太咸就是多油，慢慢地我妈也改改做法，后来就磨合好了。我倒是一下子轻松很多，洗衣做饭免了。&lt;/p&gt;

&lt;p&gt;六七月时，我妈也陪着送我老婆到公司门口，再折去买菜之类。老婆大概从怀孕六个月后就开始走路上班，她们公司离我家大概1.5公里。可能走路比较多的缘故，娃也比较活跃，经常踢她。我妈说从我老婆后影看，是看不到肚子的，肚子比较紧实，收敛，应该是个男娃。老人家估计是比较喜欢要个孙子吧，我们倒是不偏颇，不过私底下老婆估计会更希望要个儿子。到孕周三十多周，睡觉会有各种不舒服，不过，她是运动员的体质，也没有什么太难为的地方。&lt;/p&gt;

&lt;p&gt;三十五周后，其实肚子很大了。也可以明显在肚皮上看到娃不知是脚还是小手倏地从这里划到那里，这个时候其实还是比较有乐趣的，听胎心我一直没有听出来过，即便买了听诊器。就等着瓜熟蒂落，好像也没有太多担心和焦虑。我们的胎教，唯念了一本《爱的教育》。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;出生&lt;/h2&gt;
&lt;p&gt;八月二十五号那天是周一，我吃完晚饭后去打球，我妈陪着她去球场走了一圈，后来她去跟大妈们跳舞去了。老婆一直看完我打球，晚上九点左右往回走，回来时在湖边还看到小唐老婆，她也是大肚子，月份比我们打几天。还跟他聊了半点，她也着急怎么还不出来呢。回家后我洗澡，老婆也洗漱完，我们准备睡觉了。大概到十一点多，老婆把我叫醒，我刚睡迷糊，一个激灵起来，她说好像流了点东西，肚子有些痛。估计要上医院，叫我收拾东西，她要洗个澡。她洗澡是疼痛已经规律了，她因为阅读怀孕的书籍多一些，比较了解。赶紧把我妈叫起来，东西拿好，敢去妇幼。我停好车把她们送到妇产科大楼里，在休息室待产。期间做了一个B超，老婆那个疼的呀，大热天像打冷颤样。&lt;/p&gt;

&lt;p&gt;到凌晨三点左右，开的差不多了。进产房开始产，允许一个家属进去，我跟进，我妈留着外边。助产士是一位优秀的女士，态度好，姿态专业，知识面也还好。边指示边安慰，老婆扎上针输液（应该是止疼的），很快，娃就开始冒出来了，我没敢去看，只是握着她的手。由于手用力过猛，导致输液的手肿的跟大包子一样，娃出来的那一个刻，我没有热泪盈眶，而是专业地回到护士此时是几分几秒准确时间。娃大叫一阵出来后，竟然睁着眼睛，全身胎质，粉白粉白，头发黑，胳膊手指细长，五官健全。安顿好后，我赶紧出去跟我妈报告了下，她非得把胎盘带回去自己处理，护士也不让她到里边看一眼，我陪着她到外面打的士，让她回去休息天亮再过来。奶奶很是高兴，回去估计也睡不着。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;看护&lt;/h2&gt;
&lt;p&gt;在妇产科九楼，我们两还不会给孩子换尿不湿，幸好住了个三人间，旁边一大哥过来指导了下。各种问题一紧张就问问护士，经常半夜娃大哭，奶头接洽的不是很合适，吃的不爽口，初乳少，她们都建议为奶粉，媳妇坚持让他啃自己的奶，这其实是明智之举，让娃养成了自己吃奶的习惯。当然，庆幸她身体那么好，生完一天后就可以下床自如，还一起照顾娃。很多时候我帮不上忙，从床这一边跑到那一边，又跑回这一边，只能把其他都给她保障好。奶奶天亮过来抱孙子时，的确乐开了花。那几天我基本没时间睡觉，晚上搞娃，就8点清查时，我赶紧到车里眯一下。现在想想，是一种忘我舍我的投入，快乐着，忘了劳累，忘了世界。&lt;/p&gt;

&lt;p&gt;周二清晨是4点几分生出来，我现在竟然忘了。周五出院，一切顺利。住院期间老婆同事过来指导了一下，再次感谢一下。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;喂养&lt;/h2&gt;
&lt;p&gt;刚开始愁奶水和娃睡觉睡得少，每天精确给他吃喝拉撒计时，用尿布。可能老婆比较兴奋，同事来看望时她像没事人样矫健地走来走去，谈笑风生，这其实对恢复有一点点影响吧。最好潜静修养，多补补觉。好在有我妈在，轻松很多，况且我修了2周假期。所有的时间都投入到小家伙身上，的确，没有多余，还怕不够。&lt;/p&gt;

&lt;p&gt;三个月后放松一些，娃也忽然睡得多了些。大人在转变，娃也在成长。&lt;/p&gt;

&lt;p&gt;现在五个多月，咿咿呀呀，搓手搓脚，时而高兴大小，时而眉头紧锁，时而呆萌看物，时而暴跳如雷。非常精彩，你看着这么一个小生命呼啦呼啦地长得这么大。现在养成一个习惯，一家人吃饭时他非得到饭桌旁围观才开心。再，我爸十一月十一日过了看孙子，一家人其乐融融。我们都围着儿子转，他是一家人快乐的源泉，使我们手脚的拌，心中的拌。16年元旦后老婆也上班，白天奶奶带，有烦心事，总快乐多。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;开始&lt;/h2&gt;
&lt;p&gt;生活从什么地方开始，好像是从这里开始。15年，其实我在述职报告中提到最大的收获就是得了个儿子（虽跟工作无关），种种事情，如约而来，如期而至。生活的艺术不止于此，源于家人、工作和社会的相随，所失所得何从讨论呢。归源于对她们的爱，情不知所起，一往而深。愿深深深几许呢，16年，生活才刚刚开始。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为人父母后，老婆最大改变是耐心和宽容，她以前对自己要求很高，对别人也很严苛，很难交到知心的朋友，因为自己太过锋利。现在，她会从母亲的身份去理解自己父母的不易，理解别人的很多不足。至于我，除了时时有工作中的忧愁，心里总是踏实的，因为有这么一个快乐的家庭后盾，当然，我的工作没那么糟糕去，只是，随心随性，如落叶飘零，浅水浅枝，孕育不了厚物。&lt;/p&gt;

&lt;p&gt;积淀算是好的开始。&lt;/p&gt;

</description>
        <pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate>
        <link>http://shjang.com/blog/2016/02/02/Passed-Year-2015/</link>
        <guid isPermaLink="true">http://shjang.com/blog/2016/02/02/Passed-Year-2015/</guid>
        
        <category>2015</category>
        
        <category>然然</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Hello, world</title>
        <description>
&lt;h3 class=&quot;no_toc&quot; id=&quot;section&quot;&gt;目录&lt;/h3&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#hello-world&quot; id=&quot;markdown-toc-hello-world&quot;&gt;Hello, world&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;hello-world&quot;&gt;Hello, world&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;c
	#include &amp;lt;shjang.h&amp;gt; //include shjang&#39;s home  
	#define HAPPY  OK  
	int main()  
	{
		double shjang;  
		short  August;  
		time_t time_start = time();
		printf(&quot;Hello, Jekyll and Markdown!\n&quot;)
		return HAPPY;
	}	
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Dec 2015 00:00:00 +0000</pubDate>
        <link>http://shjang.com/blog/2015/12/19/hello-world/</link>
        <guid isPermaLink="true">http://shjang.com/blog/2015/12/19/hello-world/</guid>
        
        <category>newbies</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
